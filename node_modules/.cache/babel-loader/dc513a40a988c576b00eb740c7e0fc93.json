{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _events = require('events');\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar createUUID = function createUUID() {\n  var pattern = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx';\n  return pattern.replace(/[xy]/g, function (c) {\n    var r = Math.random() * 16 | 0;\n    var v = c === 'x' ? r : r & 0x3 | 0x8;\n    return v.toString(16);\n  });\n};\n\nvar Constants = {\n  CHANGE: 'change',\n  INFO: 'info',\n  SUCCESS: 'success',\n  WARNING: 'warning',\n  ERROR: 'error'\n};\n\nvar NotificationManager = function (_EventEmitter) {\n  _inherits(NotificationManager, _EventEmitter);\n\n  function NotificationManager() {\n    _classCallCheck(this, NotificationManager);\n\n    var _this = _possibleConstructorReturn(this, (NotificationManager.__proto__ || Object.getPrototypeOf(NotificationManager)).call(this));\n\n    _this.listNotify = [];\n    return _this;\n  }\n\n  _createClass(NotificationManager, [{\n    key: 'create',\n    value: function create(notify) {\n      var defaultNotify = {\n        id: createUUID(),\n        type: 'info',\n        title: null,\n        message: null,\n        timeOut: 5000\n      };\n\n      if (notify.priority) {\n        this.listNotify.unshift(Object.assign(defaultNotify, notify));\n      } else {\n        this.listNotify.push(Object.assign(defaultNotify, notify));\n      }\n\n      this.emitChange();\n    }\n  }, {\n    key: 'info',\n    value: function info(message, title, timeOut, onClick, priority) {\n      this.create({\n        type: Constants.INFO,\n        message: message,\n        title: title,\n        timeOut: timeOut,\n        onClick: onClick,\n        priority: priority\n      });\n    }\n  }, {\n    key: 'success',\n    value: function success(message, title, timeOut, onClick, priority) {\n      this.create({\n        type: Constants.SUCCESS,\n        message: message,\n        title: title,\n        timeOut: timeOut,\n        onClick: onClick,\n        priority: priority\n      });\n    }\n  }, {\n    key: 'warning',\n    value: function warning(message, title, timeOut, onClick, priority) {\n      this.create({\n        type: Constants.WARNING,\n        message: message,\n        title: title,\n        timeOut: timeOut,\n        onClick: onClick,\n        priority: priority\n      });\n    }\n  }, {\n    key: 'error',\n    value: function error(message, title, timeOut, onClick, priority) {\n      this.create({\n        type: Constants.ERROR,\n        message: message,\n        title: title,\n        timeOut: timeOut,\n        onClick: onClick,\n        priority: priority\n      });\n    }\n  }, {\n    key: 'remove',\n    value: function remove(notification) {\n      this.listNotify = this.listNotify.filter(function (n) {\n        return notification.id !== n.id;\n      });\n      this.emitChange();\n    }\n  }, {\n    key: 'emitChange',\n    value: function emitChange() {\n      this.emit(Constants.CHANGE, this.listNotify);\n    }\n  }, {\n    key: 'addChangeListener',\n    value: function addChangeListener(callback) {\n      this.addListener(Constants.CHANGE, callback);\n    }\n  }, {\n    key: 'removeChangeListener',\n    value: function removeChangeListener(callback) {\n      this.removeListener(Constants.CHANGE, callback);\n    }\n  }]);\n\n  return NotificationManager;\n}(_events.EventEmitter);\n\nexports.default = new NotificationManager();\nmodule.exports = exports['default'];","map":null,"metadata":{},"sourceType":"script"}